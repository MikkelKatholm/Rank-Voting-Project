import os, sys
sys.path.insert(0, os.path.dirname(sys.argv[0]) + '/..')

from Compiler.library import *
from Compiler.compilerLib import Compiler
from consts import *
compiler = Compiler()

# def make_ballots(input_directory_name: str, output_directory_name: str):
#     from os import listdir
#     file_list = listdir(input_directory_name)
#     ballots = []
#     for file_name in file_list:
#         priorities = Array(NUM_CANDIDATES, sint)
#         priorities_from_file = [int(value) for value in open(f"{input_directory_name}/{file_name}", "r").read().split()]
#         @for_range(NUM_CANDIDATES)
#         def _(idx):
#             priorities[idx] = sint(priorities_from_file.pop(0))

#         ballot_matrix = Matrix(NUM_CANDIDATES, NUM_CANDIDATES, value_type=sint)
#         @for_range(NUM_CANDIDATES)
#         def _(i):
#             @for_range(NUM_CANDIDATES)
#             def _(j):
#                 is_priority = (priorities[j] == i)
#                 ballot_matrix[i][j] = is_priority.if_else(sint(1), sint(0))
#         ballots.append(ballot_matrix)
    
def debug_print(secret_stuff, msg="Debug"):
    to_reveal = secret_stuff[:]
    print_ln_to(0, '%s: %s', msg, to_reveal.reveal())
    
def make_ballots(input_directory_name: str, output_directory_name: str):
    from os import listdir
    file_list = listdir(input_directory_name)
    for file_name in file_list:
        priorities_from_file = [int(value) for value in open(f"{input_directory_name}/{file_name}", "r").read().split()]
        #format as python matrix [[],[],[]]
        ballot_matrix = []
        for i in range(NUM_CANDIDATES):
            row = []
            for j in range(NUM_CANDIDATES):
                is_priority = (priorities_from_file[j] == i)
                row.append(1 if is_priority else 0)
            ballot_matrix.append(row)
        secret_shard_ballot = sint.input_tensor_via(0, ballot_matrix)


@compiler.register_function("make_ballots_main")
def make_ballots_main():
    make_ballots("../ballots", "../ballots_secret_shared")

if __name__ == "__main__":
    compiler.compile_func()
